Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nspring.servlet.multipart.max-file-size=128KB\r\nspring.servlet.multipart.max-request-size=128KB\r\n\r\nspring.servlet.multipart.enabled=true\r\nspring.servlet.multipart.location=${java.io.tmpdir}\r\n\r\nspring.jpa.hibernate.ddl-auto=update\r\n# MySQL jdbc connection url.\r\nspring.datasource.url=jdbc:mysql://172.17.0.1:3307/userdata\r\n#spring.datasource.url=jdbc:mysql://localhost:3307/userdata\r\n# MySQL jdbc driver class name.\r\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\r\n# MySQL database username and password\r\nspring.datasource.username=root\r\nspring.datasource.password=privacyisdead\r\n\r\ngraphql.spqr.gui.enabled=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 64eb567c87463faaa85ec96745a2643eb3b620d0)
+++ b/src/main/resources/application.properties	(date 1625693763260)
@@ -7,8 +7,8 @@
 
 spring.jpa.hibernate.ddl-auto=update
 # MySQL jdbc connection url.
-spring.datasource.url=jdbc:mysql://172.17.0.1:3307/userdata
-#spring.datasource.url=jdbc:mysql://localhost:3307/userdata
+#spring.datasource.url=jdbc:mysql://172.17.0.1:3307/userdata
+spring.datasource.url=jdbc:mysql://localhost:3307/userdata
 # MySQL jdbc driver class name.
 spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
 # MySQL database username and password
Index: src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/Instagram.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage dataInfoLogic.Controller.RESTController.SocialNetworks;\r\n\r\n\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.ObjectReader;\r\nimport dataInfoLogic.Services.CredentialsManager;\r\nimport dataInfoLogic.Services.DataManagement;\r\nimport dataInfoLogic.DataTypes.FrontendDTO.UserCredentials;\r\nimport dataInfoLogic.DataTypes.SQLData;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\n@CrossOrigin\r\n@RestController\r\npublic class Instagram {\r\n\r\n    @Autowired\r\n    DataManagement dataManagement;\r\n\r\n    @Autowired\r\n    CredentialsManager credentialsManager;\r\n\r\n    @PostMapping(path = \"/data/instagram/advertisement\")\r\n    public ResponseEntity<?> submit(@RequestParam(value = \"file1\", required = false) MultipartFile file1,\r\n                                    @RequestParam(value = \"file2\", required = false) MultipartFile file2,\r\n                                    @RequestParam(value = \"file3\", required = false) MultipartFile file3,\r\n                                    @RequestParam(value = \"file4\", required = false) MultipartFile file4,\r\n                                    @RequestParam(value = \"file5\", required = false) MultipartFile file5,\r\n                                    @RequestParam(value = \"uid\", required = false) String uid,\r\n                                    @RequestParam(value = \"secret\", required = false) String secret) throws IOException {\r\n\r\n\r\n        if(file1 == null){\r\n            new ResponseEntity<>(\"No file attached\", HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        //check if user credentials are provided or assign new ones\r\n        UserCredentials userCredentials = new UserCredentials();\r\n        if (uid != null && secret != null) {\r\n            userCredentials.setUid(uid);\r\n            userCredentials.setSecret(secret);\r\n\r\n            //check if user credentials are correct if they are provided\r\n            if (!credentialsManager.checkPw(userCredentials)) {\r\n                return new ResponseEntity<>(\"Wrong user credentials\", HttpStatus.BAD_REQUEST);\r\n            }\r\n\r\n        } else {\r\n            userCredentials=credentialsManager.randomUserCred();\r\n        }\r\n\r\n        //create helpers\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        ObjectReader objectReader = objectMapper.reader();\r\n\r\n        //loop to retrieve content from all files\r\n        for(int i = 0; i<5; i++){\r\n\r\n            MultipartFile currentFile;\r\n            if(i==0){\r\n                currentFile = file1;\r\n            }else if(i==2){\r\n                currentFile = file2;\r\n            }else if(i==3){\r\n                currentFile = file3;\r\n            }else if(i==4){\r\n                currentFile = file4;\r\n            }else{\r\n                currentFile = file5;\r\n            }\r\n\r\n            //retrieve json content\r\n            if (!(currentFile == null) && !currentFile.isEmpty()) {\r\n\r\n                //retrieve json content\r\n                if(Objects.equals(currentFile.getOriginalFilename(), \"your_reels_topics.json\")){\r\n                    //read data from file\r\n                    BufferedReader br;\r\n                    List<String> result = new ArrayList<>();\r\n                    String json=\"\";\r\n                    try {\r\n\r\n                        String line;\r\n                        InputStream is = currentFile.getInputStream();\r\n                        br = new BufferedReader(new InputStreamReader(is));\r\n                        while ((line = br.readLine()) != null) {\r\n                            result.add(line);\r\n                            json+=line;\r\n                        }\r\n                    } catch (IOException e) {\r\n                        System.err.println(e.getMessage());\r\n                    }\r\n                    LinkedList<String> stringList=new LinkedList<>();\r\n                    try {\r\n                        JSONObject object = new JSONObject(json);\r\n                        JSONArray array = object.getJSONArray(\"topics_your_reels_topics\");\r\n                        for (int k = 0; k < array.length(); k++) {\r\n                            String topic = array.getJSONObject(k).getJSONObject(\"string_map_data\").getJSONObject(\"Name\").getString(\"value\");\r\n                            stringList.add(topic);\r\n                        }\r\n                    }catch (Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    //call data management controller for categorization\r\n                    SQLData sqlData = new SQLData();\r\n                    sqlData.setStringList(stringList);\r\n                    sqlData.setCompany(\"instagram\");\r\n                    sqlData.setCredentials(userCredentials);\r\n                    dataManagement.ProfileInformation(sqlData);\r\n\r\n\r\n\r\n                }else if(Objects.equals(currentFile.getOriginalFilename(), \"your_topics.json\")){\r\n                    JsonNode content = objectReader.readTree(currentFile.getBytes());\r\n\r\n                    //try different possibilities where to find content\r\n                    if(!content.at(\"/topics_your_reels_topics\").isEmpty()){\r\n                        content = content.at(\"/topics_your_reels_topics\");\r\n                    }\r\n                    //read data from file\r\n                    BufferedReader br;\r\n                    List<String> result = new ArrayList<>();\r\n                    String json=\"\";\r\n                    try {\r\n\r\n                        String line;\r\n                        InputStream is = currentFile.getInputStream();\r\n                        br = new BufferedReader(new InputStreamReader(is));\r\n                        while ((line = br.readLine()) != null) {\r\n                            result.add(line);\r\n                            json+=line;\r\n                        }\r\n                    } catch (IOException e) {\r\n                        System.err.println(e.getMessage());\r\n                    }\r\n                    LinkedList<String> stringList=new LinkedList<>();\r\n                    try {\r\n                        JSONObject object = new JSONObject(json);\r\n                        JSONArray array = object.getJSONArray(\"topics_your_topics\");\r\n                        for (int k = 0; k < array.length(); k++) {\r\n                            String topic = array.getJSONObject(k).getJSONObject(\"string_map_data\").getJSONObject(\"Name\").getString(\"value\");\r\n                            stringList.add(topic);\r\n                        }\r\n                    }catch (Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    //call data management controller for categorization\r\n                    SQLData sqlData = new SQLData();\r\n                    sqlData.setStringList(stringList);\r\n                    sqlData.setCompany(\"instagram\");\r\n                    sqlData.setCredentials(userCredentials);\r\n                    dataManagement.ProfileInformation(sqlData);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new ResponseEntity<>(userCredentials, HttpStatus.OK);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/Instagram.java b/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/Instagram.java
--- a/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/Instagram.java	(revision 64eb567c87463faaa85ec96745a2643eb3b620d0)
+++ b/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/Instagram.java	(date 1625695056227)
@@ -2,7 +2,7 @@
 package dataInfoLogic.Controller.RESTController.SocialNetworks;
 
 
-import com.fasterxml.jackson.core.type.TypeReference;
+
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectReader;
Index: src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/LinkedIn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dataInfoLogic.Controller.RESTController.SocialNetworks;\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.ObjectReader;\r\nimport dataInfoLogic.Services.CredentialsManager;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.ui.ModelMap;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport dataInfoLogic.Services.DataManagement;\r\nimport dataInfoLogic.DataTypes.FrontendDTO.UserCredentials;\r\nimport dataInfoLogic.DataTypes.SQLData;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\n\r\n@CrossOrigin\r\n@RestController\r\npublic class LinkedIn {\r\n\r\n    @Autowired\r\n    DataManagement dataManagement;\r\n\r\n    @Autowired\r\n    CredentialsManager credentialsManager;\r\n\r\n    @PostMapping(path = \"/data/linkedin/advertisement\")\r\n    public ResponseEntity<?> submit(@RequestParam(value = \"file1\", required = false) MultipartFile file1,\r\n                                    @RequestParam(value = \"file2\", required = false) MultipartFile file2,\r\n                                    @RequestParam(value = \"file3\", required = false) MultipartFile file3,\r\n                                    @RequestParam(value = \"file4\", required = false) MultipartFile file4,\r\n                                    @RequestParam(value = \"file5\", required = false) MultipartFile file5,\r\n                                    @RequestParam(value = \"uid\", required = false) String uid,\r\n                                    @RequestParam(value = \"secret\", required = false) String secret) throws IOException {\r\n\r\n\r\n        if(file1 == null){\r\n            new ResponseEntity<>(\"No file attached\", HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        //check if user credentials are provided or assign new ones\r\n        UserCredentials userCredentials = new UserCredentials();\r\n        if (uid != null && secret != null) {\r\n            userCredentials.setUid(uid);\r\n            userCredentials.setSecret(secret);\r\n\r\n            //check if user credentials are correct if they are provided\r\n            if (!credentialsManager.checkPw(userCredentials)) {\r\n                return new ResponseEntity<>(\"Wrong user credentials\", HttpStatus.BAD_REQUEST);\r\n            }\r\n\r\n        } else {\r\n            userCredentials=credentialsManager.randomUserCred();\r\n        }\r\n\r\n        //create helpers\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        ObjectReader objectReader = objectMapper.reader();\r\n\r\n        //loop to retrieve content from all files\r\n        for(int i = 0; i<5; i++){\r\n\r\n            MultipartFile currentFile;\r\n            if(i==0){\r\n                currentFile = file1;\r\n            }else if(i==2){\r\n                currentFile = file2;\r\n            }else if(i==3){\r\n                currentFile = file3;\r\n            }else if(i==4){\r\n                currentFile = file4;\r\n            }else{\r\n                currentFile = file5;\r\n            }\r\n\r\n            //retrieve json content\r\n            if (!(currentFile == null) && !currentFile.isEmpty()) {\r\n\r\n                //retrieve json content\r\n                if(Objects.equals(currentFile.getOriginalFilename(), \"Ad_Targeting.csv\")){\r\n\r\n                    BufferedReader br;\r\n                    List<String> result = new ArrayList<>();\r\n                    LinkedList<String> stringList = new LinkedList<>();\r\n\r\n                    try {\r\n\r\n                        String line;\r\n                        InputStream is = currentFile.getInputStream();\r\n                        br = new BufferedReader(new InputStreamReader(is));\r\n                        while ((line = br.readLine()) != null) {\r\n                            result.add(line);\r\n                        }\r\n\r\n                        List <String> content = new ArrayList<>(result.subList(1, result.indexOf(result.get(result.size() - 1)) + 1));\r\n                        for (String string: content) {\r\n                            String array [] = string.split(\";\");\r\n                            for (int k = 0; k<array.length; k++) {\r\n                                stringList.add(array[k]);\r\n                            }\r\n                        }\r\n                        System.out.println(stringList);\r\n\r\n\r\n                    } catch (IOException e) {\r\n                        System.err.println(e.getMessage());\r\n                    }\r\n\r\n\r\n                    //call data management controller for categorization\r\n                    SQLData sqlData = new SQLData();\r\n                    sqlData.setStringList(stringList);\r\n                    sqlData.setCompany(\"linkedin\");\r\n                    sqlData.setCredentials(userCredentials);\r\n                    dataManagement.ProfileInformation(sqlData);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return new ResponseEntity<>(userCredentials, HttpStatus.OK);\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/LinkedIn.java b/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/LinkedIn.java
--- a/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/LinkedIn.java	(revision 64eb567c87463faaa85ec96745a2643eb3b620d0)
+++ b/src/main/java/dataInfoLogic/Controller/RESTController/SocialNetworks/LinkedIn.java	(date 1625695056219)
@@ -6,14 +6,12 @@
 import java.util.List;
 import java.util.Objects;
 
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.JsonNode;
+
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectReader;
 import dataInfoLogic.Services.CredentialsManager;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.ui.ModelMap;
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.multipart.MultipartFile;
 import dataInfoLogic.Services.DataManagement;
