Index: src/main/java/dataInfoLogic/Controller/SendMeText.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dataInfoLogic.Controller;\r\n\r\nimport dataInfoLogic.DataTypes.CategorizationDTO.*;\r\nimport dataInfoLogic.DataTypes.DataAnalysis.TopicAmount;\r\nimport dataInfoLogic.DataTypes.DataAnalysis.TopicAmountByCompany;\r\nimport dataInfoLogic.DataTypes.DataAnalysis.TopicPercentage;\r\nimport dataInfoLogic.DataTypes.DelUserCompany;\r\nimport dataInfoLogic.DataTypes.FrontendDTO.UserCredentials;\r\nimport dataInfoLogic.DataTypes.SQLData;\r\nimport dataInfoLogic.Entities.UserData;\r\nimport dataInfoLogic.Entities.UserDataList;\r\nimport dataInfoLogic.Repositories.UserDataRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpEntity;\r\nimport org.springframework.http.HttpMethod;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport java.util.LinkedList;\r\n\r\n\r\n@CrossOrigin\r\n@RestController\r\n\r\n\r\npublic class SendMeText {\r\n\r\n    @Autowired\r\n    UserDataRepository userDataRepository;\r\n\r\n    @PostMapping(path = \"data/newentry\")\r\n    public ResponseEntity<?> ProfileInformation(@RequestBody String string) {\r\n        //Gets Text, for example: Google Facebook\r\n        //Puts the given words into a list\r\n        //Sends them to DataManagementController and receives Answer back\r\n        //Simulates other controllers sending Linkedlists of Strings to the DataManagementController\r\n\r\n        String list[] = string.split(\" \");\r\n        LinkedList<String> stringlist = new LinkedList<>();\r\n        for (int i = 2; i < list.length; i++) {\r\n            stringlist.add(list[i]);\r\n        }\r\n\r\n        try {\r\n            RestTemplate restTemplate = new RestTemplate();\r\n            String uri = \"http://localhost:8080/data/importsql\";\r\n            SQLData sqlData = new SQLData();\r\n            sqlData.setCompany(list[0]);\r\n            UserCredentials userCredentials = new UserCredentials();\r\n            userCredentials.setUid(list[1]);\r\n            userCredentials.setSecret(\"Hallo\");\r\n            sqlData.setCredentials(userCredentials);\r\n            sqlData.setStringlist(stringlist);\r\n\r\n            HttpEntity<SQLData> request = new HttpEntity<>(sqlData);\r\n            ResponseEntity<String> response = restTemplate.exchange(uri, HttpMethod.POST, request, String.class);\r\n\r\n            return ResponseEntity.ok(response);\r\n\r\n        } catch (Exception exception) {\r\n            System.out.println(exception);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    @PostMapping(path = \"data/deluseridtest\")\r\n    public ResponseEntity<?> delUserId(@RequestBody String string) {\r\n\r\n        CategoryInputString categoryInputString = new CategoryInputString();\r\n        categoryInputString.setCategoryInput(string);\r\n        try {\r\n            HttpEntity<CategoryInputString> request = new HttpEntity<>(categoryInputString);\r\n            RestTemplate restTemplate = new RestTemplate();\r\n            String uri = \"http://localhost:8080/data/clearuserdata\";\r\n            ResponseEntity<String> response = restTemplate.exchange(uri, HttpMethod.POST, request, String.class);\r\n\r\n            return ResponseEntity.ok(response);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @PostMapping(path = \"data/delusercompanytest\")\r\n    public ResponseEntity<?> delUserCompany(@RequestBody String string) {\r\n        String strings[] = string.split(\" \");\r\n        try {\r\n            DelUserCompany delUserCompany = new DelUserCompany();\r\n            delUserCompany.setUserid(strings[0]);\r\n            delUserCompany.setCompany(strings[1]);\r\n            HttpEntity<DelUserCompany> request = new HttpEntity<>(delUserCompany);\r\n            RestTemplate restTemplate = new RestTemplate();\r\n            String uri = \"http://localhost:8080/data/delusercompany\";\r\n            ResponseEntity<String> response = restTemplate.exchange(uri, HttpMethod.POST, request, String.class);\r\n            return ResponseEntity.ok(response);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @PostMapping(path = \"data/getusertopicstest\")\r\n    public ResponseEntity<?> getusertopics(@RequestBody String string) {\r\n        CategoryInputString categoryInputString = new CategoryInputString();\r\n        categoryInputString.setCategoryInput(string);\r\n        try {\r\n            HttpEntity<CategoryInputString> request = new HttpEntity<>(categoryInputString);\r\n            RestTemplate restTemplate = new RestTemplate();\r\n            String uri = \"http://localhost:8080/data/getusertopics\";\r\n            ResponseEntity<UserDataList> response = restTemplate.exchange(uri, HttpMethod.POST, request, UserDataList.class);\r\n            UserDataList userDataList=response.getBody();\r\n            LinkedList<TopicPercentage> topicsPercentages= analysetopicdistribution(userDataList);\r\n            return ResponseEntity.ok(topicsPercentages);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n    public LinkedList<TopicPercentage> analysetopicdistribution(UserDataList userDataList){\r\n        int putin=0;\r\n        int putin1=0;\r\n        //Resulting percentage\r\n        LinkedList<TopicPercentage> topicsPercentages=new LinkedList<>();\r\n        //All topics sorted by company\r\n        LinkedList<TopicAmountByCompany> topicAmountByCompanies=new LinkedList<>();\r\n\r\n        for(UserData userData: userDataList.getUserData()){\r\n            putin=0;\r\n            putin1=0;\r\n            for(TopicAmountByCompany topicAmountByCompany: topicAmountByCompanies) {\r\n                if(topicAmountByCompany.getCompany().equals(userData.getCompany())) {\r\n                    LinkedList<TopicAmount> topicAmounts=topicAmountByCompany.topicAmounts;\r\n                    for (TopicAmount topicAmount : topicAmounts) {\r\n                        if (topicAmount.getTopic().equals(userData.getTopic())) {\r\n                            topicAmount.setAmount(topicAmount.getAmount() + userData.getWeight());\r\n                            putin = 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (putin != 1) {\r\n                        TopicAmount topicAmount = new TopicAmount();\r\n                        topicAmount.setTopic(userData.getTopic());\r\n                        topicAmount.setAmount(userData.getWeight());\r\n                        topicAmounts.add(topicAmount);\r\n                    }\r\n                    putin1=1;\r\n                }\r\n            }\r\n            if(putin1!=1){\r\n                TopicAmountByCompany topicAmountByCompany=new TopicAmountByCompany();\r\n                LinkedList<TopicAmount> topicAmounts=new LinkedList<>();\r\n                TopicAmount topicAmount= new TopicAmount();\r\n                topicAmount.setTopic(userData.getTopic());\r\n                topicAmount.setAmount(userData.getWeight());\r\n                topicAmounts.add(topicAmount);\r\n                topicAmountByCompany.setTopicAmounts(topicAmounts);\r\n                topicAmountByCompany.setCompany(userData.getCompany());\r\n                topicAmountByCompanies.add(topicAmountByCompany);\r\n            }\r\n        }\r\n        int companies=topicAmountByCompanies.size();\r\n        for(TopicAmountByCompany topicAmountByCompany: topicAmountByCompanies) {\r\n            LinkedList<TopicAmount> topicAmounts1=topicAmountByCompany.getTopicAmounts();\r\n            Double totalweight = topicAmounts1.stream().mapToDouble(x -> x.getAmount()).reduce(0, (a, b) -> a + b);\r\n            //For every topic in a company\r\n            for (TopicAmount topicAmount : topicAmounts1) {\r\n                putin=0;\r\n                for (TopicPercentage topicPercentage : topicsPercentages) {\r\n                    if(topicPercentage.getTopic().equals(topicAmount.getTopic())){\r\n                        putin=1;\r\n                        topicPercentage.setPercentage(topicPercentage.getPercentage() + topicAmount.getAmount()/totalweight/companies);\r\n                    }\r\n                }\r\n                if(putin!=1){\r\n                    TopicPercentage topicPercentage = new TopicPercentage();\r\n                    topicPercentage.setPercentage(topicAmount.getAmount() / totalweight/companies);\r\n                    topicPercentage.setTopic(topicAmount.getTopic());\r\n                    topicsPercentages.add(topicPercentage);\r\n                }\r\n            }\r\n        }\r\n        return topicsPercentages;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/dataInfoLogic/Controller/SendMeText.java b/src/main/java/dataInfoLogic/Controller/SendMeText.java
--- a/src/main/java/dataInfoLogic/Controller/SendMeText.java	
+++ b/src/main/java/dataInfoLogic/Controller/SendMeText.java	
@@ -9,8 +9,6 @@
 import dataInfoLogic.DataTypes.SQLData;
 import dataInfoLogic.Entities.UserData;
 import dataInfoLogic.Entities.UserDataList;
-import dataInfoLogic.Repositories.UserDataRepository;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.ResponseEntity;
@@ -26,9 +24,6 @@
 
 public class SendMeText {
 
-    @Autowired
-    UserDataRepository userDataRepository;
-
     @PostMapping(path = "data/newentry")
     public ResponseEntity<?> ProfileInformation(@RequestBody String string) {
         //Gets Text, for example: Google Facebook
@@ -59,7 +54,7 @@
             return ResponseEntity.ok(response);
 
         } catch (Exception exception) {
-            System.out.println(exception);
+            exception.printStackTrace();
         }
 
         return null;
@@ -116,8 +111,8 @@
         }
     }
     public LinkedList<TopicPercentage> analysetopicdistribution(UserDataList userDataList){
-        int putin=0;
-        int putin1=0;
+        int putin;
+        int putin1;
         //Resulting percentage
         LinkedList<TopicPercentage> topicsPercentages=new LinkedList<>();
         //All topics sorted by company
